function Save_Close_PRC_data(config,uncurt_result,rainfall_result,ideal_result,rainfall_prc,ideal_prc,target_percentage_lifetime)
Curtailing_Metric = ["Curtailing Method",...
    "Dataset Type",...
    "Uncurtailed Lifetime [h]","Uncurtailed AEP [MWh]","Total Time of Period [h]","Time Turbine Active [h]",...
    "Target Percent Lifetime Increase",...
    "Curtailed Lifetime (rainfall) [h]","Curtailed Lifetime (rainfall) [y]", "Percentage Lifetime Increase (rainfall)",...    
    "Curtailed AEP (rainfall) [MWh]","Percentage Decrease AEP (rainfall)",...
    "Time Curtailed (rainfall) [h]","Percentage Curtailed (rainfall)",...
    "Percentage Active Time Curtailed (rainfall)",...
    "Curtailed Lifetime (ideal) [h]","Curtailed Lifetime (ideal) [y]", "Percentage Lifetime Increase (ideal)",...    
    "Curtailed AEP (ideal) [MWh]","Percentage Decrease AEP (ideal)",...
    "Time Curtailed (ideal) [h]","Percentage Curtailed (ideal)",...
    "Percentage Active Time Curtailed (ideal)",...
    "Lower Droplet Criteria [mm]","Upper Droplet Criteria [mm]","Lower Windspeed Criteria [mm]", "Upper Windspeed Criteria [m/s]","Lower Rainfall Limit [mm/h]","Upper Rainfall Limit [mm/h]","Curtailing Wind Speed" ];

uncurt_damage = sum(uncurt_result.damage_matrix,"all");
prc_damage = sum(rainfall_result.damage_matrix,"all");

data_quantity_days = uncurt_result.data_quantity_days;

uncurt_life_h = (data_quantity_days*24*(1/uncurt_damage));
prc_life_h = rainfall_result.incubation_hours;
ideal_life_h  = ideal_result.incubation_hours;

time_curt_rainfall = rainfall_prc.time_curtailed;
time_curt_ideal = ideal_prc.time_curtailed;

AEP_uncurt = uncurt_result.AEP;
AEP_rainfall = rainfall_result.AEP;
AEP_ideal = ideal_result.AEP;

wind_velocities = uncurt_result.wind_velocities;
time_turbine_operational = data_quantity_days * length(wind_velocities(wind_velocities>=3 & wind_velocities<=25))/length(wind_velocities);

if config.use_best_distribution_PRC
    best_PRC_string = "Best";
else
    best_PRC_string = "Measured";
end

Data_Metric = [config.curtailing_criteria(config.curtailing_criteria_chosen),...
    best_PRC_string,...
    uncurt_life_h,AEP_uncurt,data_quantity_days*24,time_turbine_operational*24,...
    target_percentage_lifetime,...
    prc_life_h,prc_life_h/(365.24*24), 100*(prc_life_h-uncurt_life_h)/uncurt_life_h,...    
    AEP_rainfall, 100*(AEP_uncurt-AEP_rainfall)/AEP_rainfall,...
    time_curt_rainfall*24,100*(time_curt_rainfall/data_quantity_days),...
    100*(time_curt_rainfall/time_turbine_operational),...
    ideal_life_h,ideal_life_h/(365.24*24), 100*(ideal_life_h-uncurt_life_h)/uncurt_life_h,...    
    AEP_ideal, 100*(AEP_uncurt-AEP_ideal)/AEP_ideal,...
    time_curt_ideal*24,100*(time_curt_ideal/data_quantity_days),...
    100*(time_curt_ideal/time_turbine_operational),...
    config.curtailing_lower_criteria,config.curtailing_upper_criteria, config.curtailing_wind_speed_lower,config.curtailing_wind_speed_upper,config.curtailing_rainfall_lower,config.curtailing_rainfall_upper,config.curtailing_wind_speed];

Curtailing_Metric = Curtailing_Metric(:); % Convert to column vectors
Data_Metric = Data_Metric(:);

path = fileparts(fileparts(fileparts(uncurt_result.folder_save_location)))+"\"+config.location_considered+"_PRC_Results"+"_"+config.version_number+".xlsx";

Write_Excel_Table(Curtailing_Metric,Data_Metric,path,uncurt_result.global_run_number);

close all
end