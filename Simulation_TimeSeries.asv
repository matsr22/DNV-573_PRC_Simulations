addpath(genpath('Functions\'))

%
% Configuration of the Simulation
%

% ---------------------------
% Analysis - WIND OPTIONS
% ---------------------------
config.use_extrapolated_wind_data = true;
config.use_exact_w_s = true; % Controls if the exact wind speed is used or  the wind is placed into bins and then the average of that bin is used


% ---------------------------
% Analysis - TURBINE OPTIONS
% ---------------------------
config.turbine_used = "15MW";% Gives which turbine is considered by the analysis options: [3MW] WINDPACT Turbine, [5MW] NREL Turbine and [15MW] NREL Turbine
config.coating_used = 'ThreeM'; % Alters the coating properties used in the analysis, options: [AAP] (from the RENER2024 paper), [ThreeM] (Case 2 in Sanchez Et al), [ORE] (Case 3 in Sanchez Et al)
config.consider_all_strips = false; % Controls if all strips are calculated or just the outermost one
% ---------------------------
% Analysis - RAINFALL OPTIONS
% ---------------------------
config.use_filtered_data = true;
config.consider_terminal_velocities = true; % If false sets all terminal velocities to 1, as is done in the joint FDF
config.use_measured_terminal_velocites = false; % If considering terminal velocities, use measured rather than emperical
config.use_best_distribution_simulation = false;
config.ommit_first_droplet_class = true;
config.ommit_lowest_rainfall_rates = true;

% ---------------------------
% Analysis - DATASET USED
% ---------------------------
config.location_considered = "Lampedusa"; % Determines which location is being analysed, options: [Lancaster], [Lecce], [Lampedusa], [North_Sea]
config.DT = 10; % Temporal Resolution of the Data, expressed in minutes

fdf_plotting_variables = ["Droplet_Diameter_Damage","Droplet_Diameter_Incident","Mass_Weighted_Diameter_Damage","Mass_Weighted_Diameter_Incident","Rainfall_Damage","Rainfall_Incident","Median_Diameter_Damage","Median_Diameter_Incident"];
config.fdf_variable_chosen = [1 5]; % Can either be a vector of all graphs to produce or a scalar 
config.normalise_plot = 1; % 1 for true 0 for false - Could do with changing



% ---------------------------
% Analysis - PRECIPITATION REACTIVE CONTROL
% ---------------------------
config.enable_PRC = false;
config.curtailing_wind_speed = 9; % The percentage of maximum rotor speed Turbine Operates at during curtailing
config.use_best_distribution_PRC = true; % Controls if Best distribution is used to find curtailing locations, or Measured is used. Damage should allways be calculated based upon measured

config.curtailing_criteria = ["Dmass","Median","Rainfall","Dmass_Rainfall","Median_Rainfall","Damage"];
config.curtailing_criteria_chosen = 3;

% Rain Metric Criteria
config.curtailing_lower_criteria =1;
config.curtailing_upper_criteria = 2;


% Wind Metric Criteria
config.curtailing_wind_speed_lower = 9; % Min value should be 3
config.curtailing_wind_speed_upper = 25; % Max value should be 25

% Rainfall
config.curtailing_rainfall_lower =0.1;
config.curtailing_rainfall_upper = 13.9364;

% Damage Criteria
config.lifetime_extention_multiplier = 12; % For idealised case 

% ---------------------------
% Analysis - PLOTTING OPTIONS
% ---------------------------
config.plot_fdf = true; % Controls if the simulation is plotted or if just damage values are shown


config.query_doing_PRC_analysis = "Non-PRC"; % Set either PRC or Non-PRC - changes file save location
config.version_number = "REFACTOR_TESTING";


if config.plot_fdf
    [global_run_number,folder_save_location] = Generate_Save_Location(config);
end
% ---------------------------
% Analysis - Main Algorithm
% ---------------------------

strip_radii = load(append("C:\Users\matth\Documents\MATLAB\DNV matlab code\Simulation_Data\Turbine_Curves\Turbine_Data_",config.turbine_used,".mat"),"radii"); % Strips, indexed 1 to 6 of those considered in the paper
strip_radii = strip_radii.radii;

if config.use_best_distribution_simulation
    suffix = 'best';
elseif config.use_filtered_data
    suffix = "filt";
else
    suffix = "unfilt";
end

if config.consider_all_strips
    strip_index = 1:6;
else
    strip_index = 6;
end

% Modifies the file accessed to be that specific to the hub height extrapolation
% required of each turbine. 5MW not added as this is not yet relevant to
% analysis we are doing. 
if config.use_extrapolated_wind_data
    if config.turbine_used == "3MW"
        suffix2 = "_119_ext";
    elseif config.turbine_used == "15MW"
        suffix2 = "_150_ext";
    end
end

%
% Import Data
%

[wind_droplet_table, d_calc,d_bins,terminal_v_bins] = Unpack_Wind_Rain_Data(append("C:\Users\matth\Documents\MATLAB\DNV matlab code\Simulation_Data\",config.location_considered,"\",string(config.DT),"min_data_",suffix,suffix2,".mat"),config.ommit_first_droplet_class,config.ommit_lowest_rainfall_rates); 


% Remove Timestamps in the data with NaN values
wind_droplet_table.wind_avg(isnan(wind_droplet_table.wind_avg)) = 0;



data_quantity_days = (size(wind_droplet_table,1) * config.DT)/(60*24); % From the number of elements in the table, gives number of days - used for damage calculations


for i = strip_index

if config.use_best_distribution_simulation
    col_names = "dsd_" + string(0:21);
    n_droplets_air = wind_droplet_table{:, col_names};
else

% Generates a vector of the variables of the joint size velocity
% distribution indexes
for x = 1:440
    svd_indexing(x) = append("svd_",string(x-1));
end
% Gets the collumns of the joint SVD from the table
svd = wind_droplet_table{:,svd_indexing};
svdSize = size(svd);

% Gives a matrix with terminal velocities on the first axis and droplet diameters on the second
svd = reshape(svd', 20, 22, svdSize(1));  

if  config.consider_terminal_velocities & config.use_measured_terminal_velocites
    t_v_calculators = (terminal_v_bins(1:end-1) +terminal_v_bins(2:end))./2; % Currently Gets the midpoint of each of the terminal velocities
    [svd_diameters,svd_vels] = meshgrid(d_calc,t_v_calculators); % Creates grid with 1-1 correspondence with the Size-Velocity Distribution with the droplet size and velocity at each point
    svd = svd./(svd_vels); % Area converts from Impacts to per m^2, then the terminal velocity of the drops gives per m^3 (Time ommited as it cancels later - see Incident_Droplet_Calculations.pdf for an explanation)
end
n_droplets_air = sum(svd,1)./(config.DT*60); % Sum across all droplet terminal velocities
n_droplets_air = permute(n_droplets_air,[3 2 1]); % Remove droplet terminal velocity dimension

A = 0.00456; % area in m^2 of sensor
n_droplets_air = n_droplets_air./A;

if config.consider_terminal_velocities & ~config.use_measured_terminal_velocites
     % Provides the terminal velocity from only the measured values of the droplet size. This equation is a simplified one for the one that takes into account air density
    t_v_from_diameters = Terminal_V_From_D(d_calc);
    n_droplets_air = n_droplets_air./t_v_from_diameters;
end
end

% --------------------------
% Load in time series wind data:
% --------------------------
wind_velocities = wind_droplet_table{:,"wind_avg"};

if ~ config.use_exact_w_s
     [w_calc,d_calc] = LoadMeasuredDSD("Simulation_Data\RENER2024\myMap_turbine.mat");
     [~, indices] = min(abs(wind_velocities(:) - w_calc), [], 2); % Gets for each exact wind velocity, the index of the wind velocity that is the bin this velocity falls under
     wind_velocities = w_calc(indices)';
end

% Convert the wind speeds to the corresponding speed of the blade at a
% each indexuse

% PRECIPITATION REACTIVE CONTROL 

if config.enable_PRC
    if config.location_considered == "North_Sea"
        n_droplets_air_PRC = n_droplets_air;
    elseif config.use_best_distribution_simulation == true
        error("Best distribution should not be used for damage simulation of PRC control")
    elseif config.use_best_distribution_simulation == config.use_best_distribution_PRC % Both Measured
        n_droplets_air_PRC = n_droplets_air;
    else % PRC applied to Best Distribution
        suffix = "best";
        wind_droplet_table = Unpack_Wind_Rain_Data(append("C:\Users\matth\Documents\MATLAB\DNV matlab code\Simulation_Data\",config.location_considered,"\",string(config.DT),"min_data_",suffix,suffix2,".mat"),config.ommit_first_droplet_class,config.ommit_lowest_rainfall_rates); 
        col_names = "dsd_" + string(0:21);
        n_droplets_air_PRC = wind_droplet_table{:, col_names};
    end
       
    % Prep the dataset for PRC - Calculate Mass_W_Diameter, Rainfall and
    % Median. 

    d_widths = d_bins(2:end)-d_bins(1:end-1);

    mass_weighted_diameters = sum((n_droplets_air_PRC./d_widths).*d_calc.^4,2)./sum((n_droplets_air_PRC./d_widths).*d_calc.^3,2); % Gets the mass weighted diameter for each

    rainfalls = Rainfall_From_Cubic_Meter(n_droplets_air_PRC,d_calc); 

    medians = zeros(size(n_droplets_air_PRC,1),1);
    for time_stamp = 1:size(n_droplets_air_PRC,1)


        frequencies = n_droplets_air_PRC(time_stamp,:) / sum(n_droplets_air_PRC(time_stamp,:));
        
        % Cumulative frequency
        cum_freq = cumsum(frequencies);
        
        % Find index where cumulative freq crosses 0.5
        median_idx = find(cum_freq >= 0.5, 1, 'first');
        
        if isempty(median_idx)
            medians(time_stamp) = 0;
        else
             medians(time_stamp) = d_calc(median_idx(1));
        end
    end

    [uncurt_damage,damage_criteria,time_series_damage_uncurt,AEP_uncurt] = Get_Uncurtailed_Data(config.location_considered,config.use_best_distribution_simulation,config.lifetime_extention_multiplier);
    
    switch config.curtailing_criteria_chosen
        case 1
            curtailing_locations = mass_weighted_diameters >= config.curtailing_lower_criteria & mass_weighted_diameters <= config.curtailing_upper_criteria & config.curtailing_wind_speed_lower < wind_velocities & config.curtailing_wind_speed_upper > wind_velocities ;
            config.curtailing_rainfall_lower = "-";
            config.curtailing_rainfall_upper = "-";
        case 2
            curtailing_locations = medians >= config.curtailing_lower_criteria & medians <= config.curtailing_upper_criteria & config.curtailing_wind_speed_lower < wind_velocities & config.curtailing_wind_speed_upper > wind_velocities;
            config.curtailing_rainfall_lower = "-";
            config.curtailing_rainfall_upper = "-";        
        case 3
            curtailing_locations = rainfalls > config.curtailing_rainfall_lower & rainfalls <= config.curtailing_rainfall_upper & config.curtailing_wind_speed_lower < wind_velocities & config.curtailing_wind_speed_upper > wind_velocities;
            config.curtailing_lower_criteria = "-";
            config.curtailing_upper_criteria = "-";
        case 4
            curtailing_locations = rainfalls > config.curtailing_rainfall_lower & rainfalls <= config.curtailing_rainfall_upper &mass_weighted_diameters >= config.curtailing_lower_criteria & mass_weighted_diameters <= config.curtailing_upper_criteria & config.curtailing_wind_speed_lower < wind_velocities & config.curtailing_wind_speed_upper > wind_velocities ;
        case 5
            curtailing_locations = rainfalls >= config.curtailing_rainfall_lower & rainfalls <= config.curtailing_rainfall_upper & medians >= config.curtailing_lower_criteria & medians <= config.curtailing_upper_criteria & config.curtailing_wind_speed_lower < wind_velocities & config.curtailing_wind_speed_upper > wind_velocities;

        case 6
            curtailing_locations = time_series_damage_uncurt >= damage_criteria;
        otherwise 
            error("Selected curtailing criteria does not exist")
    end
    
    [impact_velocities, powers] = WindToBladeVelocity(wind_velocities,strip_radii(i),config.turbine_used,config.curtailing_wind_speed,curtailing_locations);
    time_curtailed = (sum(curtailing_locations)*config.DT)/(60*24); % Time in Days Curtailed 
    data_quantity_curtailed = sum(curtailing_locations);
    AEP_curt = sum(2.77778e-10*(powers*config.DT*60)); % Units of MWH

    percentage_energy_loss = 100*((AEP_uncurt-AEP_curt)./(AEP_uncurt));
    


else

[impact_velocities,powers] = WindToBladeVelocity(wind_velocities,strip_radii(i),config.turbine_used);
end


% Create matrix of number of droplets incident on blade per m^2
n_s = n_droplets_air .* impact_velocities.*(config.DT*60); % Convert back to per m^2 with the blade velocities (Ensuring data is along correct axis)

% Now creates a matrix with both the droplet diameters and blade velocities
% for every droplet diameter bin for every time step.
[diameter_mesh,blade_vel_mesh] = meshgrid(d_calc,impact_velocities); 


computed_vals = Get_Springer_Strength(config.coating_used); % Sets up the springer strength (Given in the RENER paper) - Ideally move this and other similar preparation steps outside the loop

allowed_impingements = Calculate_Allowed_Impingements(computed_vals,blade_vel_mesh,diameter_mesh); % Calculates the allowed impingements for each blade velocity and diameter combination

damages = n_s./allowed_impingements; 

time_series_damage = sum(damages,2); % Gets the damage for every timestep


droplet_diameter_damage = sum(damages,1); % Gets the damage for each droplet diameter

total_damage = sum(damages,'all');
if ~config.enable_PRC
    global_damage = total_damage;
end
strip_damage(i) = total_damage;
strip_hours(i) = (1/total_damage)*data_quantity_days*24; % This was one of the differences between the Rome research team's results and mine, I am using the correct slightly modified number of days in the dataset, they were using number of days in a year

end
%%

for i = 1:length(config.fdf_variable_chosen)
    Plotting_Algorithms(config,wind_velocities,config.fdf_variable_chosen(i),damages,d_bins,n_s,n_droplets_air,global_damage);
end

if ~isempty(config.fdf_variable_chosen) && config.plot_fdf
    Adjust_All_Colour_Bars(folder_save_location);
end

% ROADWORKS - this currently looks useless but is used as a workspace
% variable in the function to calculate curtailing criterion
if config.use_best_distribution_simulation
    title_part = "Best";
else
    title_part = "Measured";
end


disp('Incubation Time Predicted:')

disp(strip_hours(strip_index))

str = sprintf('%g\t', strip_hours);
str(end) = [];  % remove trailing tab
clipboard('copy', str);  % copy to clipboard

if config.enable_PRC
    Save_Close_PRC_data(uncurt_damage,total_damage,data_quantity_days,strip_hours,wind_velocities,config,AEP_uncurt,AEP_curt,time_curtailed,folder_save_location,global_run_number);
end







